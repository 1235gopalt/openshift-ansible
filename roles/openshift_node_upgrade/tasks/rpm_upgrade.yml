---
# input variables:
# - openshift.common.service_type
# - openshift_pkg_version
# - openshift.common.is_atomic

# When we update package "a-${version}" and a requires b >= ${version} if we
# don't specify the version of b yum will choose the latest version of b
# available and the whole set of dependencies end up at the latest version.
# Since the package module, unlike the yum module, doesn't flatten a list
# of packages into one transaction we need to do that explicitly. The ansible
# core team tells us not to rely on yum module transaction flattening anyway.

- name: Upgrade packages
  command: "{{ ansible_pkg_mgr }} install -y {{ openshift_node_upgrade_rpm_list | join(' ')}}"
  register: result
  until: result is succeeded
  vars:
    openshift_node_upgrade_rpm_list:
      - "{{ openshift.common.service_type }}{{ openshift_pkg_version }}"
      - "{{ openshift.common.service_type }}-node{{ openshift_pkg_version }}"
      - "{{ openshift.common.service_type + '-sdn-ovs' + openshift_pkg_version if openshift_use_openshift_sdn | default(true) | bool else '' }}"
      - "{{ openshift.common.service_type }}-clients{{ openshift_pkg_version }}"
      - "tuned-profiles-{{ openshift.common.service_type }}-node{{ openshift_pkg_version }}"

- name: Ensure python-yaml present for config upgrade
  package: name=PyYAML state=present
  when: not openshift.common.is_atomic | bool
