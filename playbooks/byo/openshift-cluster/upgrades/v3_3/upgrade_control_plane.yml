---
#
# Control Plane Upgrade Playbook
#
# Upgrades masters and Docker (only on standalone etcd hosts)
#
# This upgrade does not include:
# - node service running on masters
# - docker running on masters
# - node service running on dedicated nodes
#
# You can run the upgrade_nodes.yml playbook after this to upgrade these components separately.
#
- include: ../../../../common/openshift-cluster/upgrades/init.yml

# Configure the upgrade target for the common upgrade tasks:
- hosts: l_oo_all_hosts
  tasks:
  - set_fact:
      openshift_upgrade_target: "{{ '1.3' if deployment_type == 'origin' else '3.3' }}"
      openshift_upgrade_min: "{{ '1.2' if deployment_type == 'origin' else '3.2' }}"

# Pre-upgrade

- name: Update repos on control plane hosts
  hosts: oo_masters_to_config:oo_etcd_to_config:oo_lb_to_config
  roles:
  - openshift_repos

- name: Set openshift_no_proxy_internal_hostnames
  hosts: oo_masters_to_config:oo_nodes_to_upgrade
  tasks:
  - set_fact:
      openshift_no_proxy_internal_hostnames: "{{ hostvars | oo_select_keys(groups['oo_nodes_to_config']
                                                    | union(groups['oo_masters_to_config'])
                                                    | union(groups['oo_etcd_to_config'] | default([])))
                                                | oo_collect('openshift.common.hostname') | default([]) | join (',')
                                                }}"
    when: "{{ (openshift_http_proxy is defined or openshift_https_proxy is defined) and
            openshift_generate_no_proxy_hosts | default(True) | bool }}"

- include: ../../../../common/openshift-cluster/upgrades/pre/verify_inventory_vars.yml

- include: ../../../../common/openshift-cluster/initialize_openshift_version.yml
  vars:
    # Request specific openshift_release and let the openshift_version role handle converting this
    # to a more specific version, respecting openshift_image_tag and openshift_pkg_version if
    # defined, and overriding the normal behavior of protecting the installed version
    openshift_release: "{{ openshift_upgrade_target }}"
    openshift_protect_installed_version: False

    # We skip the docker role at this point in upgrade to prevent
    # unintended package, container, or config upgrades which trigger
    # docker restarts. At this early stage of upgrade we can assume
    # docker is configured and running.
    skip_docker_role: True

- include: ../../../../common/openshift-cluster/upgrades/pre/verify_control_plane_running.yml

- include: ../../../../common/openshift-cluster/upgrades/pre/verify_upgrade_targets.yml

- include: ../../../../common/openshift-cluster/upgrades/pre/verify_docker_upgrade_targets.yml

- include: ../../../../common/openshift-cluster/upgrades/pre/gate_checks.yml

- include: ../../../../common/openshift-cluster/upgrades/pre/backup_etcd.yml

- name: Exit upgrade if dry-run specified
  hosts: oo_all_hosts
  tasks:
  - fail:
      msg: "Pre-upgrade checks completed, exiting due to openshift_upgrade_dry_run variable."
    when: openshift_upgrade_dry_run is defined and openshift_upgrade_dry_run | bool

# Separate step so we can execute in parallel and clear out anything unused
# before we get into the serialized upgrade process which will then remove
# remaining images if possible.
- name: Cleanup unused Docker images
  hosts: oo_masters_to_config:oo_etcd_to_config
  tasks:
  - include: ../../../../common/openshift-cluster/upgrades/cleanup_unused_images.yml

- include: ../../../../common/openshift-cluster/upgrades/upgrade_control_plane.yml
  vars:
    master_config_hook: "v3_3/master_config_upgrade.yml"

- include: ../../../../common/openshift-cluster/upgrades/post_control_plane.yml
